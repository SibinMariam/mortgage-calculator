{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/mortgage-calculator/mortgage-calculator.component.css","webpack:///./src/app/components/mortgage-calculator/mortgage-calculator.component.html","webpack:///./src/app/components/mortgage-calculator/mortgage-calculator.component.ts","webpack:///./src/app/components/mortgage-summary/mortgage-summary.component.css","webpack:///./src/app/components/mortgage-summary/mortgage-summary.component.html","webpack:///./src/app/components/mortgage-summary/mortgage-summary.component.ts","webpack:///./src/app/constants.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".navbar {\\n  margin-bottom: 0px;\\n  border-bottom: 1px solid #dedede;\\n  height: 50px;\\n  background-color: #000;\\n  padding-bottom: 10px;\\n}\\n\"","module.exports = \"<div>\\n  <nav class=\\\"navbar navbar-default\\\">\\n    <div class=\\\"container-fluid\\\"></div>\\n  </nav>\\n  <div class=\\\"ui-view\\\">\\n    <app-mortgage-calculator></app-mortgage-calculator>\\n  </div>\\n</div>\\n\"","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"MortgageCalculator\";\n}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { AppComponent } from \"./app.component\";\nimport { MortgageCalculatorComponent } from \"./components/mortgage-calculator/mortgage-calculator.component\";\nimport { MortgageSummaryComponent } from \"./components/mortgage-summary/mortgage-summary.component\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MortgageCalculatorComponent,\n    MortgageSummaryComponent,\n  ],\n  imports: [BrowserModule, FormsModule, ReactiveFormsModule, NgbModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","module.exports = \".mortgage-calc-container {\\n  margin-top: 40px;\\n  margin-bottom: 60px;\\n}\\n.section-header {\\n  border-bottom: 1px solid rgb(228, 228, 228);\\n}\\n.form-body {\\n  padding-top: 30px;\\n}\\n.field-section {\\n  padding-bottom: 20px;\\n}\\n\"","module.exports = \"<div class=\\\"mortgage-calc-container container\\\">\\n  <div class=\\\"section-header\\\">\\n    <h4>Mortgage Payment Calculator</h4>\\n  </div>\\n  <div class=\\\"mortgage-form\\\">\\n    <form\\n      name=\\\"mortgageForm\\\"\\n      #f=\\\"ngForm\\\"\\n      (ngSubmit)=\\\"onSubmit()\\\"\\n      id=\\\"mortgageForm\\\"\\n    >\\n      <div class=\\\"form-body\\\">\\n        <section>\\n          <div class=\\\"row field-section\\\">\\n            <div class=\\\"col-2 field-label\\\">\\n              <label>*Mortgage Amount</label>\\n              <span\\n                class=\\\"bi bi-question-circle-fill more-info-icon\\\"\\n                ngbTooltip=\\\"The amount you expect to borrow from your financial institution\\\"\\n                placement=\\\"right\\\"\\n                container=\\\"body\\\"\\n              >\\n              </span>\\n            </div>\\n            <div class=\\\"col-4 field-element input-group\\\">\\n              <div class=\\\"input-group-prepend\\\">\\n                <span class=\\\"input-group-text\\\">$</span>\\n              </div>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"mortgageAmount\\\"\\n                [ngClass]=\\\"{\\n                  'is-invalid': f.submitted && mortgageAmount.invalid\\n                }\\\"\\n                #mortgageAmount=\\\"ngModel\\\"\\n                aria-label=\\\"Mortgage Amount\\\"\\n                [(ngModel)]=\\\"formData.mortgageAmount\\\"\\n                name=\\\"mortgageAmount\\\"\\n                required\\n                type=\\\"number\\\"\\n                min=\\\"0\\\"\\n              />\\n              <div class=\\\"invalid-feedback\\\">\\n                <div\\n                  class=\\\"mortgageAmountError\\\"\\n                  *ngIf=\\\"\\n                    mortgageAmount.errors && mortgageAmount.errors.required\\n                  \\\"\\n                >\\n                  Please provide Mortgage Amount\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row field-section\\\">\\n            <div class=\\\"col-2 field-label\\\">\\n              <label>*Interest Rate</label>\\n              <span\\n                class=\\\"bi bi-question-circle-fill more-info-icon\\\"\\n                ngbTooltip=\\\"Annual interest rate for this mortgage\\\"\\n                placement=\\\"right\\\"\\n                container=\\\"body\\\"\\n              >\\n              </span>\\n            </div>\\n            <div class=\\\"col-4 field-element input-group\\\">\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                aria-label=\\\"Interest Rate\\\"\\n                name=\\\"interestRate\\\"\\n                id=\\\"interestRate\\\"\\n                [ngClass]=\\\"{\\n                  'is-invalid': f.submitted && interestRate.invalid\\n                }\\\"\\n                #interestRate=\\\"ngModel\\\"\\n                [(ngModel)]=\\\"formData.interestRate\\\"\\n                required\\n              />\\n\\n              <div class=\\\"input-group-append\\\">\\n                <span class=\\\"input-group-text\\\" id=\\\"basic-addon2\\\">%</span>\\n              </div>\\n              <div class=\\\"invalid-feedback\\\">\\n                <div\\n                  class=\\\"interestRateError\\\"\\n                  *ngIf=\\\"interestRate.errors && interestRate.errors.required\\\"\\n                >\\n                  Please provide Interest Rate\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"row field-section\\\">\\n            <div class=\\\"col-2 field-label\\\">\\n              <label>*Amortization Period</label>\\n              <span\\n                class=\\\"bi bi-question-circle-fill more-info-icon\\\"\\n                ngbTooltip=\\\"The number of years and months over which you will repay this loan\\\"\\n                placement=\\\"right\\\"\\n                container=\\\"body\\\"\\n              >\\n              </span>\\n            </div>\\n            <div class=\\\"col-2 field-element\\\">\\n              <select\\n                class=\\\"custom-select\\\"\\n                name=\\\"amortizationPeriodYear\\\"\\n                id=\\\"amortizationPeriodYear\\\"\\n                [(ngModel)]=\\\"formData.amortizationPeriodYear\\\"\\n              >\\n                <option\\n                  *ngFor=\\\"let option of amortizationPeriodYearOptions\\\"\\n                  [value]=\\\"option\\\"\\n                >\\n                  {{ option > 1 ? option + \\\" Years\\\" : option + \\\" Year\\\" }}\\n                </option>\\n              </select>\\n            </div>\\n            <div class=\\\"col-2 field-element\\\">\\n              <select\\n                class=\\\"custom-select\\\"\\n                name=\\\"amortizationPeriodMonth\\\"\\n                id=\\\"amortizationPeriodMonth\\\"\\n                [(ngModel)]=\\\"formData.amortizationPeriodMonth\\\"\\n              >\\n                <option value=\\\"\\\"></option>\\n                <option\\n                  *ngFor=\\\"let option of amortizationPeriodMonths\\\"\\n                  [value]=\\\"option\\\"\\n                >\\n                  {{\\n                    option && option != 1\\n                      ? option + \\\" Months\\\"\\n                      : option + \\\" Month\\\"\\n                  }}\\n                </option>\\n              </select>\\n            </div>\\n          </div>\\n          <div class=\\\"row field-section\\\">\\n            <div class=\\\"col-2 field-label\\\">\\n              <label>*Payment Frequency</label>\\n            </div>\\n            <div class=\\\"col-4 field-element\\\">\\n              <select\\n                class=\\\"custom-select\\\"\\n                [(ngModel)]=\\\"formData.paymentFrequency\\\"\\n                id=\\\"paymentFrequency\\\"\\n                name=\\\"paymentFrequency\\\"\\n              >\\n                <option\\n                  *ngFor=\\\"let option of paymetOptions\\\"\\n                  [value]=\\\"option.value\\\"\\n                >\\n                  {{ option.label }}\\n                </option>\\n              </select>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"row field-section\\\">\\n            <div class=\\\"col-2 field-label\\\">\\n              <label>*Term</label>\\n              <span\\n                class=\\\"bi bi-question-circle-fill more-info-icon\\\"\\n                ngbTooltip=\\\"The number of term years\\\"\\n                placement=\\\"right\\\"\\n                container=\\\"body\\\"\\n              >\\n              </span>\\n            </div>\\n\\n            <div class=\\\"col-2 field-element\\\">\\n              <select\\n                class=\\\"custom-select\\\"\\n                [(ngModel)]=\\\"formData.term\\\"\\n                id=\\\"term\\\"\\n                name=\\\"term\\\"\\n              >\\n                <option *ngFor=\\\"let option of termYearOptions\\\" [value]=\\\"option\\\">\\n                  {{ option > 1 ? option + \\\" Years\\\" : option + \\\" Year\\\" }}\\n                </option>\\n              </select>\\n            </div>\\n          </div>\\n        </section>\\n      </div>\\n      <button\\n        class=\\\"submit-button btn btn-primary\\\"\\n        type=\\\"submit\\\"\\n        id=\\\"mortgageSubmit\\\"\\n      >\\n        Calculate\\n      </button>\\n    </form>\\n  </div>\\n  <app-mortgage-summary [summaryInfo]=\\\"summaryInfo\\\"></app-mortgage-summary>\\n</div>\\n\"","import { Component, OnInit } from \"@angular/core\";\nimport { Constants } from \"../../constants\";\n\n@Component({\n  selector: \"app-mortgage-calculator\",\n  templateUrl: \"./mortgage-calculator.component.html\",\n  styleUrls: [\"./mortgage-calculator.component.css\"],\n})\nexport class MortgageCalculatorComponent implements OnInit {\n  // Creating an array of numbers from 1 to AmortizationPeriodMaxLimit to display  Amortization year dropdown\n  amortizationPeriodYearOptions = Array.from(\n    Array(Constants.amortizationPeriodMaxLimit + 1).keys()\n  ).slice(1);\n\n  // Creating an array of numbers from 1 to 12 to display Amortization Months in dropdown\n  amortizationPeriodMonths = Array.from(Array(12).keys());\n\n  // Creating an array of numbers from 1 to termMaxLimit to display  Tterms year dropdown\n  termYearOptions = Array.from(Array(Constants.termMaxLimit + 1).keys()).slice(\n    1\n  );\n  formData = {\n    mortgageAmount: null,\n    interestRate: Constants.defaultInterestRate,\n    amortizationPeriodYear: Constants.defaultamortizationPeriod,\n    amortizationPeriodMonth: null,\n    defaultamortizationPeriod: Constants.defaultamortizationPeriod,\n    paymentFrequency: Constants.defaultpayOption,\n    term: Constants.defaultTerm,\n  };\n  paymetOptions = Constants.payOptions;\n  summaryInfo: {};\n  constructor() {}\n\n  ngOnInit() {}\n\n  getPaymentDetails() {\n    const startPrinciple = Number(this.formData.mortgageAmount);\n    const interestRate = Number(this.formData.interestRate);\n    const paymentType = this.formData.paymentFrequency;\n\n    //Get payment frequecy/year from selected payment type.\n    let paymentFrequency;\n    paymentFrequency = Constants.payOptions.filter((item) => {\n      return item.value == paymentType;\n    })[0].frequency;\n    let periodInterestRate = interestRate / 100 / Number(paymentFrequency);\n\n    // Calculating total amortizationPeriod in years by combining year and month dropdown options.\n    let amortizationPeriod =\n      this.formData.amortizationPeriodYear +\n      (this.formData.amortizationPeriodMonth\n        ? Number(this.formData.amortizationPeriodMonth) / 12\n        : 0);\n    let termYears = Number(this.formData.term);\n    let years = Number(amortizationPeriod);\n    let numberofPayments = years * paymentFrequency;\n    let termNumberOfPayments = termYears * paymentFrequency;\n\n    /** payPerPeriod Calculation is based on equation payment/period = P [ i(1 + i)^n ] / [ (1 + i)^n – 1]\n     * P = priciapl amount, i = interest rate per period, n = number of payments in the total duation.\n     **/\n    let expValue = Math.pow(1 + +periodInterestRate, numberofPayments);\n    let payPerPeriod =\n      startPrinciple * ((periodInterestRate * expValue) / (expValue - 1));\n\n    /**\n     * If the Total Cost calculation is needed only for Amortization Period, we can calculate Total interest paid = (pay per period*No of payments) - startPrinciple.\n     * But in our case we need to find it for the term period also.\n     * As we need to display Total Cost for a term period along with complete Amortization Period, iterating till the period and adding up totalInterestPaid\n     * Enhancement scope: This values with each time projections while itteration can display in a table/Graph with for more detailed visualization.\n     */\n    let deductedPrinciple = startPrinciple;\n\n    let totalInterestPaid = 0;\n    let currentPeriod = 1;\n    let totalTermInterestPaid = 0;\n    let totalTermPrinciplePaid = 0;\n\n    // Iterating till deductedPrinciple is greater than 0\n    while (deductedPrinciple >= 0) {\n      let periodInterest = deductedPrinciple * periodInterestRate;\n      let principlePaid = payPerPeriod - periodInterest;\n      totalInterestPaid = totalInterestPaid + periodInterest;\n      deductedPrinciple = deductedPrinciple - principlePaid;\n\n      /**\n       * For term interest and priciple paymentt calculation.\n       * Till termNumberOfPayments, adding interest and pricipal paid during that term period.\n       */\n      if (currentPeriod <= termNumberOfPayments) {\n        totalTermInterestPaid = totalTermInterestPaid + periodInterest;\n        totalTermPrinciplePaid = totalTermPrinciplePaid + principlePaid;\n      }\n      currentPeriod++;\n    }\n    const totalCost = totalInterestPaid + startPrinciple;\n    const termTotalCost = totalTermPrinciplePaid + totalTermInterestPaid;\n    let durationMonth =\n      this.formData.amortizationPeriodMonth &&\n      this.formData.amortizationPeriodMonth != 0\n        ? \", \" + this.formData.amortizationPeriodMonth + \" \" + \"Months\"\n        : \"\";\n\n    this.summaryInfo = {\n      payPerPeriod: payPerPeriod, // payPeriod is common for term and amortization.\n      amortizationNoOfPayments: paymentFrequency * years,\n      termNoOfPayments: paymentFrequency * Number(this.formData.term),\n      amortizationDuration:\n        this.formData.amortizationPeriodYear + \" Years\" + durationMonth,\n      termDuration: this.formData.term,\n      amortizationTotalInterestPaid: totalInterestPaid,\n      termTotalInterestPaid: totalTermInterestPaid,\n      amortizationTotalTermPrinciplePaid: startPrinciple,\n      termTotalTermPrinciplePaid: totalTermPrinciplePaid,\n      amortizationTotalCost: totalCost,\n      termTotalCost: termTotalCost,\n    };\n  }\n\n  private isFormValid(): boolean {\n    // Checking if its number or empty for validation\n    if (\n      !this.formData.mortgageAmount ||\n      !this.formData.interestRate ||\n      isNaN(this.formData.mortgageAmount) ||\n      isNaN(this.formData.interestRate)\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  onSubmit() {\n    // Calculations are doing only if the form is valid.\n    if (!this.isFormValid()) {\n      return;\n    }\n    this.getPaymentDetails();\n  }\n}\n","module.exports = \".mortgage-summary {\\n  padding-top: 40px;\\n}\\n.term-summary {\\n  padding-top: 25px;\\n}\\n.summary-title {\\n  border-bottom: 1px solid #dedede;\\n  padding-bottom: 12px;\\n}\\n.summary-content {\\n  margin-top: 20px;\\n}\\n.bold-info {\\n  font-weight: 600;\\n  padding-left: 2px;\\n}\\n\"","module.exports = \"<div class=\\\"mortgage-summary\\\" *ngIf=\\\"summaryInfo && summaryInfo.payPerPeriod\\\">\\n  <h4>Calculation Summary</h4>\\n  <div class=\\\"summary-content\\\">\\n    <div class=\\\"table-responsive\\\">\\n      <table class=\\\"table table-striped table-hover table-bordered\\\">\\n        <thead>\\n          <tr>\\n            <th>Category</th>\\n            <th>Term</th>\\n            <th>Amortization Period</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr>\\n            <td>Number of Payments</td>\\n            <td>\\n              {{ summaryInfo.termNoOfPayments }}\\n            </td>\\n            <td>\\n              {{ summaryInfo.amortizationNoOfPayments }}\\n            </td>\\n          </tr>\\n          <tr>\\n            <td>Mortgage Payment</td>\\n            <td>\\n              {{ summaryInfo.payPerPeriod }}\\n            </td>\\n            <td>\\n              {{ summaryInfo.payPerPeriod }}\\n            </td>\\n          </tr>\\n          <tr>\\n            <td>Principal Payments</td>\\n            <td>\\n              {{ summaryInfo.termTotalTermPrinciplePaid }}\\n            </td>\\n            <td>\\n              {{ summaryInfo.amortizationTotalTermPrinciplePaid }}\\n            </td>\\n          </tr>\\n          <tr>\\n            <td>Interest Payments</td>\\n            <td>\\n              {{ summaryInfo.termTotalInterestPaid }}\\n            </td>\\n            <td>\\n              {{ summaryInfo.amortizationTotalInterestPaid }}\\n            </td>\\n          </tr>\\n          <tr>\\n            <td>Total Cost</td>\\n            <td>\\n              {{ summaryInfo.termTotalCost }}\\n            </td>\\n            <td>\\n              {{ summaryInfo.amortizationTotalCost }}\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <h4 class=\\\"summary-title\\\">Mortgage Summary</h4>\\n    <div class=\\\"summary-content\\\">\\n      <div class=\\\"amortization-summary\\\">\\n        <h6>Amortization Info</h6>\\n        <div>\\n          During the term period of\\n          <span class=\\\"bold-info\\\"\\n            >{{ summaryInfo.amortizationDuration }},\\n          </span>\\n          you will have made\\n          <span class=\\\"bold-info\\\">{{\\n            summaryInfo.amortizationNoOfPayments\\n          }}</span>\\n          payments of\\n          <span class=\\\"bold-info\\\">{{ summaryInfo.payPerPeriod }}.</span>\\n          <div>\\n            You have paid\\n            <span class=\\\"bold-info\\\">{{\\n              summaryInfo.amortizationTotalTermPrinciplePaid\\n            }}</span>\\n            in principal,\\n            <span class=\\\"bold-info\\\"\\n              >{{ summaryInfo.amortizationTotalInterestPaid }}\\n            </span>\\n            in interest, for a total of\\n            <span class=\\\"bold-info\\\"\\n              >{{ summaryInfo.amortizationTotalCost }}.</span\\n            >\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"term-summary\\\">\\n        <h6>Term Info</h6>\\n        <div>\\n          During the term period of\\n          <span class=\\\"bold-info\\\">{{ summaryInfo.termDuration }}</span>\\n          Year, you will have made\\n          <span class=\\\"bold-info\\\">{{ summaryInfo.termNoOfPayments }}</span>\\n          payments of\\n          <span class=\\\"bold-info\\\">{{ summaryInfo.payPerPeriod }}.</span>\\n        </div>\\n        <div>\\n          You have paid\\n          <span class=\\\"bold-info\\\">{{\\n            summaryInfo.termTotalTermPrinciplePaid\\n          }}</span>\\n          in principal,\\n          <span class=\\\"bold-info\\\"\\n            >{{ summaryInfo.termTotalInterestPaid }}\\n          </span>\\n          in interest, for a total of\\n          <span class=\\\"bold-info\\\">{{ summaryInfo.termTotalCost }}.</span>\\n          And have a balance of\\n          <span class=\\\"bold-info\\\"\\n            >{{\\n              summaryInfo.amortizationTotalTermPrinciplePaid -\\n                summaryInfo.termTotalTermPrinciplePaid\\n            }}.</span\\n          >\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"app-mortgage-summary\",\n  templateUrl: \"./mortgage-summary.component.html\",\n  styleUrls: [\"./mortgage-summary.component.css\"],\n})\nexport class MortgageSummaryComponent implements OnInit {\n  @Input()\n  summaryInfo: {};\n\n  constructor() {}\n  ngOnInit() {}\n}\n","export class Constants {\n  static readonly amortizationPeriodMaxLimit = 30;\n  static readonly defaultamortizationPeriod = 25;\n  static readonly termMaxLimit = 5;\n  static readonly defaultInterestRate = 2.5;\n  static readonly defaultTerm = 1;\n  static readonly payOptions = [\n    { value: \"WEEKLY\", frequency: 52, label: \"Weekly\" },\n    { value: \"BI-WEEKLY\", frequency: 26, label: \"Bi-Weekly(Every 2 weeks)\" },\n    {\n      value: \"SEMI-MONTHLY\",\n      frequency: 24,\n      label: \"Semi-Monthly(24x per year)\",\n    },\n    { value: \"MONTHLY\", frequency: 12, label: \"Monthly(12x per year)\" },\n  ];\n  static readonly defaultpayOption = \"MONTHLY\";\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}